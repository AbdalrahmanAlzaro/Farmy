const express = require("express");
const { Pool } = require("pg");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const cors = require("cors"); // Add the cors module

const app = express();
const port = 3000;

// Create a PostgreSQL connection pool
const pool = new Pool({
  user: "postgres",
  host: "localhost",
  database: "Farmy",
  password: "Abd2001@",
  port: 5432,
});

const secretKey = 'a24f41837ef05ad9e52a3794dab8c0055cc7baf383db5d19534454768751a344';

// Test the database connection
pool
  .connect()
  .then(() => {
    console.log("Connected to PostgreSQL database");

  })
  .catch((err) => {
    console.error("Error connecting to PostgreSQL database:", err);
  });

app.use(express.json());
app.use(cors()); // Enable CORS for all routes

// Define your routes and middleware here

//register and log in 


app.post('/Register', async (req, res) => {
  const { username, email, password } = req.body;
  const hashedPassword = bcrypt.hashSync(password, 10);

  try {
    const checkEmailSql = 'SELECT * FROM "user" WHERE email = $1';
    const checkEmailValues = [email];
    const checkEmailResult = await pool.query(checkEmailSql, checkEmailValues);

    if (checkEmailResult.rows.length > 0) {
      return res.status(400).json({ error: 'Email already registered' });
    }

    const sql = 'INSERT INTO "user" (username, email, password, role) VALUES ($1, $2, $3, $4) RETURNING *';
    const values = [username, email, hashedPassword, 'user'];
    const insertResult = await pool.query(sql, values);

    const insertedUserId = insertResult.rows[0].id; // Assuming the 'id' is generated by the database during insertion
    const token = jwt.sign({ id: insertedUserId, username, email }, secretKey);
    res.json({ token, message: 'User registered successfully' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'An error occurred while registering the user' });
  }
});


app.post('/LogIn', (req, res) => {
  const { email, password } = req.body; // Assuming the email and password are provided in the request body

  const sql = 'SELECT * FROM public.user WHERE email = $1';

  pool.query(
    sql, [email],
    async (error, results) => {
      if (error) {
        return res.status(400).json(error);
      }

      const user = results.rows[0];

      if (!user || !(await bcrypt.compare(password, user.password))) {

        return res.status(401).send("incorrect email or password");
      }
      else {
        const token = jwt.sign({ id: user.id, username: user.username, email: user.email }, secretKey);
        res.json({ token: token, message: 'User registered successfully' });
      }
    }
  );

});


app.put("/user/:id", async (req, res) => {

  try {

    const { id } = req.params;
    const { username, email } = req.body;
    console.log(username, email, id)
    const sql = `UPDATE public."user" SET  username= $1, email= $2 WHERE id= $3`;
    const editValues = [username, email, id];
    const updateService = await pool.query(sql, editValues);
    console.log(editValues)

    res.json(updateService.rows);
  } catch (error) {
    res.status(500).json({ error: "can't edit data" })
  }
});


app.post('/orders/:user_id', (req, res) => {
  const { user_id } = req.params; // Retrieve the user_id from the request URL parameter
  const { product_data } = req.body;
  const { OrderNumber } = req.body;

  try {
    // Assuming you have a database connection and a query execution function
    // Insert the data into the orders table
    const query = 'INSERT INTO orders (product_data, user_id, OrderNumber) VALUES ($1, $2, $3)';
    const values = [product_data, user_id, OrderNumber];

    // Execute the query and handle any errors
    // Replace `executeQuery` with your actual function to execute the query
    pool.query(query, values)
      .then(() => {
        res.status(200).json({ message: 'Data stored successfully.' });
      })
      .catch((error) => {
        console.error(error);
        res.status(500).json({ error: 'An error occurred while storing data.' });
      });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'An error occurred while processing the request.' });
  }
});


app.post('/confirmationPayment/:id', async (req, res) => {
  const id = req.params.id; // Get the value of the id parameter from the request

  // Retrieve other data from the request body
  const {
    Username,
    Email,
    CardNumber,
    ExpDate,
    CVV,
    StreetName,
    ZipCode,
    Subtotal,
    PhoneNumber,
    OrderNumber,
    Date,
  } = req.body;

  try {
    // Hash the CardNumber using bcrypt
    const hashedCardNumber = await bcrypt.hash(CardNumber, 10);

    // Insert the data into the ConfirmationPayment table
    const query = `
      INSERT INTO ConfirmationPayment ( Username, Email, CardNumber, ExpDate, CVV, StreetName, ZipCode, Subtotal, PhoneNumber, OrderNumber, Date, user_id) 
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
    `;
    const values = [
      
      Username,
      Email,
      hashedCardNumber,
      ExpDate,
      CVV,
      StreetName,
      ZipCode,
      Subtotal,
      PhoneNumber,
      OrderNumber,
      Date,
      id, // Use the same value for user_id as the id parameter
    ];

    await pool.query(query, values);

    // Return a response indicating successful insertion
    res.status(200).json({ message: 'ConfirmationPayment record created successfully' });
  } catch (error) {
    console.error('Error inserting data:', error);
    // Return an error response if there's an issue with the insertion
    res.status(500).json({ message: 'Error creating ConfirmationPayment record' });
  }
});



app.get('/join-data/:user_id', (req, res) => {
  const userId = req.params.user_id;

  if (!userId || isNaN(userId)) {
    return res.status(400).json({ error: 'Invalid user ID. Please provide a valid user ID.' });
  }

  const query = `
  SELECT
  cp.Subtotal,
  o.OrderNumber,
  cp.Date,
  o.product_data,
  o.user_id
FROM
  ConfirmationPayment cp
INNER JOIN
  orders o ON cp.OrderNumber = o.OrderNumber
WHERE
  o.user_id = $1;

  `;

  pool.query(query, [userId])
    .then((result) => {
      if (result.rows.length === 0) {
        return res.status(404).json({ error: 'No orders found for the specified user ID.' });
      }
      res.status(200).json(result.rows);
    })
    .catch((error) => {
      console.error(error);
      res.status(500).json({ error: 'An error occurred while fetching data.' });
    });
});



app.get('/allUsers', (req, res) => {
  pool.query('SELECT * FROM public."user"', (error, result) => {
    if (error) {
      console.error('Error executing query', error);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.status(200).json(result.rows);
    }
  });
});


app.get('/allOrders', (req, res) => {
  pool.query('SELECT * FROM public."orders"', (error, result) => {
    if (error) {
      console.error('Error executing query', error);
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.status(200).json(result.rows);
    }
  });
});



app.post('/messages/:user_id', async (req, res) => {
  try {
    const { user_id } = req.params;
    const { name, email, message } = req.body;

    const query = `
      INSERT INTO messages (name, email, message, user_id)
      VALUES ($1, $2, $3, $4)
      RETURNING id, name, email, message, user_id;
    `;

    const values = [name, email, message, user_id];
    const result = await pool.query(query, values);

    res.json(result.rows[0]);
  } catch (error) {
    console.error('Error inserting data:', error);
    res.status(500).json({ error: 'An error occurred while inserting data.' });
  }
});






app.post('/api/products', (req, res) => {
  const { id, category, image, Description, price } = req.body;

  // Validate the incoming data (You can add more validation as per your requirements)
  if (!id || !category || !image || !Description || !price) {
      return res.status(400).json({ error: 'Please provide all required fields.' });
  }

  // Create a new product object
  const newProduct = {
      id,
      category,
      image,
      Description,
      price
  };

  // Insert the new product into the 'products' table
  const query = 'INSERT INTO products (id, category, image, Description, price) VALUES (?, ?, ?, ?, ?)';
  connection.query(query, [id, category, image, Description, price], (err, result) => {
      if (err) {
          console.error('Error inserting product:', err.stack);
          return res.status(500).json({ error: 'Error inserting product into database.' });
      }

      console.log('Product inserted successfully:', result.insertId);
      return res.status(201).json({ message: 'Product added successfully.', data: newProduct });
  });
});









app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
